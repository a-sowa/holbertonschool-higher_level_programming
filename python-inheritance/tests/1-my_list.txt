# Test print_sorted function

# Description: Testing the MyList class and print_sorted method.

>>> MyList = __import__('1-my_list').MyList

# Test Case 1: Basic Usage
>>> my_list = MyList([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5])
>>> my_list.print_sorted()
[1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]

# Test Case 2: Empty List
>>> my_empty_list = MyList([])
>>> my_empty_list.print_sorted()
[]

# Test Case 3: Duplicate Elements
>>> my_duplicate_list = MyList([7, 2, 4, 2, 7, 1, 4])
>>> my_duplicate_list.print_sorted()
[1, 2, 2, 4, 4, 7, 7]

# Test Case 4: Already Sorted List
>>> already_sorted_list = MyList([1, 2, 3, 4, 5])
>>> already_sorted_list.print_sorted()
[1, 2, 3, 4, 5]

# Test Case 5: Reverse Sorted List
>>> reverse_sorted_list = MyList([5, 4, 3, 2, 1])
>>> reverse_sorted_list.print_sorted()
[1, 2, 3, 4, 5]

# Test Case 6: List with Negative Numbers
>>> negative_numbers_list = MyList([-3, -1, -4, -1, -5, -9, -2, -6, -5, -3, -5])
>>> negative_numbers_list.print_sorted()
[-9, -6, -5, -5, -5, -4, -3, -3, -2, -1, -1]

# Test Case 7: List with Zero
>>> zero_in_list = MyList([3, 1, 0, 4, 5])
>>> zero_in_list.print_sorted()
[0, 1, 3, 4, 5]

# Test Case 8: Non-integer Element in List
>>> invalid_list = MyList([3, 1, 'invalid', 4, 5])
>>> invalid_list.print_sorted()
Traceback (most recent call last):
...
TypeError: '<' not supported between instances of 'str' and 'int'

# Test Case 9: List with None
>>> none_in_list = MyList([3, 1, None, 4, 5])
>>> none_in_list.print_sorted()
Traceback (most recent call last):
...
TypeError: '<' not supported between instances of 'NoneType' and 'int'

# Test Case 10: List with Float
>>> float_in_list = MyList([3, 1, 2.5, 4, 5])
>>> float_in_list.print_sorted()
[1, 2.5, 3, 4, 5]

# Test Case 11: List with Boolean
>>> bool_in_list = MyList([True, 1, False, 4, 5])
>>> bool_in_list.print_sorted()
[False, True, 1, 4, 5]

# Test Case 12: List with String
>>> string_in_list = MyList([3, 1, 'hello', 4, 5])
>>> string_in_list.print_sorted()
Traceback (most recent call last):
...
TypeError: '<' not supported between instances of 'str' and 'int'

# Test Case 13: List with Tuple
>>> tuple_in_list = MyList([3, 1, (1, 2), 4, 5])
>>> tuple_in_list.print_sorted()
Traceback (most recent call last):
...
TypeError: '<' not supported between instances of 'tuple' and 'int'