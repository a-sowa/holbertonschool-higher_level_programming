#!/usr/bin/python3
"""
   This file contains the definition of the Rectangle class,
   which inherits from the Base class.
"""

from models.base import Base


class Rectangle(Base):
    """ Rectangle class, inheriting from the Base class. """

    def __init__(self, width, height, x=0, y=0, id=None):
        """
            Constructor for the Rectangle class.

            Parameters:
            - width: Width of the rectangle.
            - height: Height of the rectangle.
            - x: X-coordinate of the rectangle.
            - y: Y-coordinate of the rectangle.
            - id: Optional identifier. If provided, passed to the Base class;
            otherwise, generated by Base.

            Public Attributes:
            - id: Unique identifier for the rectangle.
            - width: Width of the rectangle.
            - height: Height of the rectangle.
            - x: X-coordinate of the rectangle.
            - y: Y-coordinate of the rectangle.
        """

        super().__init__(id)
        self.width = width
        self.height = height
        self.x = x
        self.y = y

    @property
    def width(self):
        """Getter for the width attribute."""
        return self.__width

    @width.setter
    def width(self, value):
        """Setter for the width attribute."""
        if not isinstance(value, int):
            raise TypeError("Width must be an integer.")
        if value <= 0:
            raise ValueError("Width must be greater than 0.")
        self.__width = value

    @property
    def height(self):
        """Getter for the height attribute."""
        return self.__height

    @height.setter
    def height(self, value):
        """Setter for the height attribute."""
        if not isinstance(value, int):
            raise TypeError("Height must be an integer.")
        if value <= 0:
            raise ValueError("Height must be greater than 0.")
        self.__height = value

    @property
    def x(self):
        """Getter for the x attribute."""
        return self.__x

    @x.setter
    def x(self, value):
        """Setter for the x attribute."""
        if not isinstance(value, int):
            raise TypeError("X must be an integer.")
        if value < 0:
            raise ValueError("X must be non-negative.")
        self.__x = value

    @property
    def y(self):
        """Getter for the y attribute."""
        return self.__y

    @y.setter
    def y(self, value):
        """Setter for the y attribute."""
        if not isinstance(value, int):
            raise TypeError("Y must be an integer.")
        if value < 0:
            raise ValueError("Y must be non-negative.")
        self.__y = value
